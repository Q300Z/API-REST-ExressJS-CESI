// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid()) @db.Uuid()
  lastname         String             @db.VarChar(255)
  firstname        String             @db.VarChar(255)
  email            String             @unique @db.VarChar(255)
  password         String             @db.VarChar(255)
  dateOfBirth      DateTime           @db.Date()
  role             String             @default("USER") @db.VarChar(255)
  createdAt        DateTime           @default(now()) @db.Timestamp()
  updatedAt        DateTime           @updatedAt @db.Timestamp()
  Event            Event[]
  EventParticipant EventParticipant[]
  Result           Result[]
}

model Event {
  id               String             @id @default(uuid()) @db.Uuid()
  name             String             @unique @db.VarChar(255)
  sport            String             @db.VarChar(255)
  description      String?            @db.Text()
  date             DateTime           @db.Date()
  location         String             @db.VarChar(255)
  image            String?            @db.VarChar(255)
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @db.Uuid()
  createdAt        DateTime           @default(now()) @db.Timestamp()
  updatedAt        DateTime           @updatedAt @db.Timestamp()
  EventParticipant EventParticipant[]
  Result           Result[]
}

model EventParticipant {
  id               String   @id @default(uuid()) @db.Uuid()
  event            Event    @relation(fields: [eventId], references: [id])
  eventId          String   @db.Uuid()
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @db.Uuid()
  registrationDate DateTime @default(now()) @db.Date()
  status           String   @default("REGISTERED") @db.VarChar(10)
  result           Int?     @db.Integer()
  performance      String?  @db.VarChar(255)
  createdAt        DateTime @default(now()) @db.Timestamp()
  updatedAt        DateTime @updatedAt @db.Timestamp()
}

model Result {
  id          String   @id @default(uuid()) @db.Uuid()
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String   @db.Uuid()
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid()
  score       Int?     @db.Integer() // Score du participant (ex: temps, points, etc.)
  position    Int?     @db.Integer() // Position dans le classement
  description String?  @db.Text() // Informations complémentaires sur le résultat
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @updatedAt @db.Timestamp()
}
